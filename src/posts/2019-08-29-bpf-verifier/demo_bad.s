
demo_bad.o:	file format ELF64-BPF

Disassembly of section main:
0000000000000000 handle_skb:
; {
       0:	bf 16 00 00 00 00 00 00 	r6 = r1
       1:	b7 01 00 00 25 64 0a 00 	r1 = 680997
; char fmt[] = "%d\n";
       2:	63 1a fc ff 00 00 00 00 	*(u32 *)(r10 - 4) = r1
; ensure_header(skb, offset, ip4);
       3:	61 62 50 00 00 00 00 00 	r2 = *(u32 *)(r6 + 80)
       4:	61 61 4c 00 00 00 00 00 	r1 = *(u32 *)(r6 + 76)
       5:	bf 13 00 00 00 00 00 00 	r3 = r1
       6:	07 03 00 00 22 00 00 00 	r3 += 34
       7:	3d 32 08 00 00 00 00 00 	if r2 >= r3 goto +8 <LBB0_2>
       8:	bf 61 00 00 00 00 00 00 	r1 = r6
       9:	b7 02 00 00 22 00 00 00 	r2 = 34
      10:	85 00 00 00 27 00 00 00 	call 39
      11:	61 62 50 00 00 00 00 00 	r2 = *(u32 *)(r6 + 80)
      12:	61 61 4c 00 00 00 00 00 	r1 = *(u32 *)(r6 + 76)
      13:	bf 13 00 00 00 00 00 00 	r3 = r1
      14:	07 03 00 00 22 00 00 00 	r3 += 34
      15:	2d 23 1b 00 00 00 00 00 	if r3 > r2 goto +27 <LBB0_6>

0000000000000080 LBB0_2:
; return ip4->ihl * 4;
      16:	71 18 0e 00 00 00 00 00 	r8 = *(u8 *)(r1 + 14)
      17:	67 08 00 00 02 00 00 00 	r8 <<= 2
      18:	57 08 00 00 3c 00 00 00 	r8 &= 60
      19:	b7 03 00 00 14 00 00 00 	r3 = 20
; if (hdrlen < sizeof(*ip4))
      20:	2d 83 16 00 00 00 00 00 	if r3 > r8 goto +22 <LBB0_6>
; ensure_header(skb, offset, tcp);
      21:	bf 87 00 00 00 00 00 00 	r7 = r8
      22:	07 07 00 00 22 00 00 00 	r7 += 34
      23:	bf 13 00 00 00 00 00 00 	r3 = r1
      24:	0f 73 00 00 00 00 00 00 	r3 += r7
      25:	3d 32 08 00 00 00 00 00 	if r2 >= r3 goto +8 <LBB0_5>
      26:	bf 61 00 00 00 00 00 00 	r1 = r6
      27:	bf 72 00 00 00 00 00 00 	r2 = r7
      28:	85 00 00 00 27 00 00 00 	call 39
      29:	61 61 4c 00 00 00 00 00 	r1 = *(u32 *)(r6 + 76)
      30:	bf 12 00 00 00 00 00 00 	r2 = r1
      31:	0f 72 00 00 00 00 00 00 	r2 += r7
      32:	61 63 50 00 00 00 00 00 	r3 = *(u32 *)(r6 + 80)
      33:	2d 32 09 00 00 00 00 00 	if r2 > r3 goto +9 <LBB0_6>

0000000000000110 LBB0_5:
      34:	07 08 00 00 0e 00 00 00 	r8 += 14
      35:	0f 81 00 00 00 00 00 00 	r1 += r8
; return tcp->doff * 4;
      36:	71 13 0c 00 00 00 00 00 	r3 = *(u8 *)(r1 + 12)
      37:	77 03 00 00 02 00 00 00 	r3 >>= 2
      38:	57 03 00 00 3c 00 00 00 	r3 &= 60
      39:	bf a1 00 00 00 00 00 00 	r1 = r10
      40:	07 01 00 00 fc ff ff ff 	r1 += -4
; bpf_trace_printk(fmt, 4, hdrlen);
      41:	b7 02 00 00 04 00 00 00 	r2 = 4
      42:	85 00 00 00 06 00 00 00 	call 6

0000000000000158 LBB0_6:
; }
      43:	b7 00 00 00 00 00 00 00 	r0 = 0
      44:	95 00 00 00 00 00 00 00 	exit
